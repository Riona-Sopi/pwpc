{"version":3,"sources":["components/Product.js","components/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["initialFieldValues","productID","productTitle","productDescription","maximumThickness","minimumThickness","maximumWidth","minimumWidth","maximumLength","minimumLength","imageSrc","imageFile","Product","props","addOrEdit","recordForEdit","useState","values","setValues","errors","setErrors","useEffect","handleInputChange","e","target","name","value","resetForm","document","getElementById","applyErrorClass","field","className","autoComplete","noValidate","onSubmit","preventDefault","temp","Object","every","x","validate","formData","FormData","append","imageName","src","type","accept","onChange","files","reader","FileReader","onload","result","readAsDataURL","id","placeholder","ProductList","productList","setProductList","setRecordForEdit","refreshProductList","productAPI","url","process","fetchAll","axios","get","create","newRecord","post","update","updatedRecord","put","delete","then","res","data","catch","err","console","log","imageCard","onClick","showRecordDetails","stopPropagation","window","confirm","onDelete","parseInt","onSuccess","Array","Math","ceil","length","map","i","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.61c956b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst defaultImageSrc = '/img/image_placeholder.png'\r\n\r\nconst initialFieldValues = {\r\n    productID: 0,\r\n    productTitle: '',\r\n    productDescription: '',\r\n    maximumThickness: '',\r\n    minimumThickness: '',\r\n    maximumWidth: '',\r\n    minimumWidth: '',\r\n    maximumLength: '',\r\n    minimumLength: '',\r\n    imageSrc: defaultImageSrc,\r\n    imageFile: null\r\n}\r\n\r\nexport default function Product(props) {\r\n\r\n    const { addOrEdit, recordForEdit } = props\r\n\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        if (recordForEdit != null)\r\n            setValues(recordForEdit);\r\n    }, [recordForEdit])\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const showPreview = e => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            let imageFile = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = x => {\r\n                setValues({\r\n                    ...values,\r\n                    imageFile,\r\n                    imageSrc: x.target.result\r\n                })\r\n            }\r\n            reader.readAsDataURL(imageFile)\r\n        }\r\n        else {\r\n            setValues({\r\n                ...values,\r\n                imageFile: null,\r\n                imageSrc: defaultImageSrc\r\n            })\r\n        }\r\n    }\r\n\r\n    const validate = () => {\r\n        let temp = {}\r\n        temp.productTitle = values.productTitle == \"\" ? false : true;\r\n        temp.imageSrc = values.imageSrc == defaultImageSrc ? false : true;\r\n        setErrors(temp)\r\n        return Object.values(temp).every(x => x == true)\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValues(initialFieldValues)\r\n        document.getElementById('image-uploader1').value = null;\r\n        setErrors({})\r\n    }\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            const formData = new FormData()\r\n            formData.append('productID', values.productID)\r\n            formData.append('productTitle', values.productTitle)\r\n            formData.append('productDescription', values.productDescription)\r\n            formData.append('maximumThickness', values.maximumThickness)\r\n            formData.append('minimumThickness', values.minimumThickness)\r\n            formData.append('maximumWidth', values.maximumWidth)\r\n            formData.append('minimumWidth', values.minimumWidth)\r\n            formData.append('maximumLength', values.maximumLength)\r\n            formData.append('minimumLength', values.minimumLength)\r\n            formData.append('imageName', values.imageName)\r\n            formData.append('imageFile', values.imageFile)\r\n            addOrEdit(formData, resetForm)\r\n        }\r\n    }\r\n\r\n    const applyErrorClass = field => ((field in errors && errors[field] == false) ? ' invalid-field' : '')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container text-center\">\r\n                <p className=\"lead\">Product</p>\r\n            </div>\r\n            <form autoComplete=\"off\" noValidate onSubmit={handleFormSubmit}>\r\n                <div className=\"card\">\r\n                    <img src={values.imageSrc} className=\"card-img-top\" />\r\n                    <div className=\"card-body\">\r\n                        <div className=\"form-group\">\r\n                            <input type=\"file\" accept=\"image/*\" className={\"form-control-file\" + applyErrorClass('imageSrc')}\r\n                                onChange={showPreview} id=\"image-uploader1\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className={\"form-control\" + applyErrorClass('productTitle')} placeholder=\"Product Title\" name=\"productTitle\"\r\n                                value={values.productTitle}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Product Description\" name=\"productDescription\"\r\n                                value={values.productDescription}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Maximum Thickness\" name=\"maximumThickness\"\r\n                                value={values.maximumThickness}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Minimum Thickness\" name=\"minimumThickness\"\r\n                                value={values.minimumThickness}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Maximum Width\" name=\"maximumWidth\"\r\n                                value={values.maximumWidth}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Minimum Width\" name=\"minimumWidth\"\r\n                                value={values.minimumWidth}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Maximum Length\" name=\"maximumLength\"\r\n                                value={values.maximumLength}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" placeholder=\"Minimum Length\" name=\"minimumLength\"\r\n                                value={values.minimumLength}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"form-group text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-light\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Product from './Product'\r\nimport axios from \"axios\";\r\n\r\nexport default function ProductList() {\r\n    const [productList, setProductList] = useState([])\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n\r\n    useEffect(() => {\r\n        refreshProductList();\r\n    }, [])\r\n\r\n    const productAPI = (url = process.env.REACT_APP_API_URL + '/Product/') => {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\r\n            delete: id => axios.delete(url + id)\r\n        }\r\n    }\r\n\r\n    function refreshProductList() {\r\n        productAPI().fetchAll()\r\n            .then(res => {\r\n                setProductList(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const addOrEdit = (formData, onSuccess) => {\r\n        if (formData.get('productID') == \"0\")\r\n            productAPI().create(formData)\r\n                .then(res => {\r\n                    onSuccess();\r\n                    refreshProductList();\r\n                })\r\n                .catch(err => console.log(err))\r\n        else\r\n            productAPI().update(formData.get('productID'), formData)\r\n                .then(res => {\r\n                    onSuccess();\r\n                    refreshProductList();\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    const showRecordDetails = data => {\r\n        setRecordForEdit(data)\r\n    }\r\n\r\n    const onDelete = (e, id) => {\r\n        e.stopPropagation();\r\n        if (window.confirm('Are you sure to delete this record?'))\r\n            productAPI().delete(id)\r\n                .then(res => refreshProductList())\r\n                .catch(err => console.log(err))\r\n    }\r\n\r\n    const imageCard = data => (\r\n        <div className=\"card\" onClick={() => { showRecordDetails(data) }}>\r\n            <img src={data.imageSrc} className=\"card-img-top rounded-circle\" />\r\n            <div className=\"card-body\">\r\n                <h5>{data.productTitle}</h5>\r\n                <span>{data.productDescription}</span> <br />\r\n                <span>{data.maximumThickness}</span> <br />\r\n                <span>{data.minimumThickness}</span> <br />\r\n                <span>{data.maximumWidth}</span> <br />\r\n                <span>{data.minimumWidth}</span> <br />\r\n                <span>{data.maximumLength}</span> <br />\r\n                <span>{data.minimumLength}</span> <br />\r\n                <button className=\"btn btn-light delete-button\" onClick={e => onDelete(e, parseInt(data.productID))}>\r\n                    <i className=\"far fa-trash-alt\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"jumbotron jumbotron-fluid py-4\">\r\n                    <div className=\"container text-center\">\r\n                        <h1 className=\"display-4\">Product Register</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <Product\r\n                    addOrEdit={addOrEdit}\r\n                    recordForEdit={recordForEdit}\r\n                />\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n                <table>\r\n                    <tbody>\r\n                        {\r\n                            //tr > 3 td\r\n                            [...Array(Math.ceil(productList.length / 3))].map((e, i) =>\r\n                                <tr key={i}>\r\n                                    <td>{imageCard(productList[3 * i])}</td>\r\n                                    <td>{productList[3 * i + 1] ? imageCard(productList[3 * i + 1]) : null}</td>\r\n                                    <td>{productList[3 * i + 2] ? imageCard(productList[3 * i + 2]) : null}</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport EmployeeList from './components/EmployeeList';\nimport ProductList from './components/ProductList';\n// import PrivateRoute from './PrivateRoute';\nimport './index.css';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n//     <Router>\n//      <main>\n//        <Route exact path=\"/\">\n//            <ProductList />\n//          </Route>\n//          <Route path=\"/productlist\">\n//          <ProductList/>\n//        </Route>\n//        <Route path=\"/employeelist\">\n//          <EmployeeList/>\n//        </Route>\n//      </main>\n//  </Router>\n    <div className=\"container\">\n      {/* <EmployeeList /> */}\n      <ProductList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}